<!--   
----------------------------------------------------------------------
-->

<template>
  <section id="sec">
    <h1>API Reference</h1>
    <div class="container">
      <VueList title="フォルダ" v-bind:parsed="parsedFolders"/>
      <VueList title="ファイル" v-bind:parsed="parsedFiles"/>

    </div>
  </section>
</template>

<!--   
----------------------------------------------------------------------
-->

<script>
import Doc from '/data/openapi.yaml';
import List from '../components/List'

/**
 * @param document
 * @param type
 * @returns {[]|*[]}
 */
const yamlParser = function(document, type) {
  if(!document.hasOwnProperty("paths")) return []; 
  //hasOwnProperty()
  //인자로는 key값, 오브젝트에 키값이 있는지(이름만 선언되면 가져온다)
  
  const pathKey = Object.keys(document.paths);
  //Object.keys()
  //오브젝트의 속성의 이름(key)를 가져온다, 결과값의 타입은 배열
  //typeof()로 보면 배열도 다 오브젝트로 뜨네..
  
  let fileObjectKey = pathKey.filter(item => (item.toLowerCase().indexOf(type) > 0));
  //filter()
  //new array = array.filter(element=> condition)
  //배열 접근시 array[index]
  //오브젝트 접근시 object.key

  //indexOf()
  //arr.indexOf(searchElement[,)
  //이거... 구문은 조금 어렵지만 ...indexOf("openapp") 이렇게 하면 유저/관리자 나누기도 가능

  let fileArr = [];
  for(let url of fileObjectKey) {
    if(document.paths.hasOwnProperty(url)) {
      const methods = Object.keys(document.paths[url]);
      for(let method of methods) {
        let methodVal = document.paths[url][method];
        fileArr.push({
          'method': method,
          'summary': methodVal.summary,
        })
      }
    }
  }
  return fileArr;
}

export default {
  name: 'Home',
  components: {
    VueList: List,
  },
  data: function() {
    return {
      parsedFiles: yamlParser(Doc, "files"),
      parsedFolders: yamlParser(Doc, "folders"),
      doc: Doc,
    }
  }
}
</script>
